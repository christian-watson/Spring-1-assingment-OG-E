@page "/upload"
@inject NavigationManager NavManager
@inject IJSRuntime JS
 @using Microsoft.JSInterop
@inject IWebHostEnvironment env

<MudGrid>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Style="background-color: #ef4638; Color:white; Height:150px"><div style="text-align: center;">Most scans by UserID: @returnMostScans()</div></MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Style="background-color: #ef4638; color:white; height:150px;"><div style="text-align: center;">Most scans: <br><br>@mostReaderScans()</div></MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Style="background-color: #ef4638; Color:white; Height:150px"><div style="text-align: center;">Unique users scanned: @uniqueUsers()</div></MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Style="background-color: #ef4638; Color:white; Height:150px"><div style="text-align: center;">
            Least reader scans: @foreach(var i in leastReaderScans()){
                <br><br>
                @i
                }</div></MudPaper>
    </MudItem>
</MudGrid>
<br><br>


@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div>Error: @ErrorMessage</div>
}


@if (files != null)
{
    <MudList T="string">
        @foreach (var file in files)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                @file.Name <code>@file.Size bytes</code>
            </MudListItem>
        }
       
    </MudList>
}
@* loops through the top five list in order of reader scans, descending order *@
@if (readerIDDict != null && readerIDDict.Count > 0)
{
    <MudSimpleTable>
        <thead>
            <tr style="background-color: black; color:white;">
                <th>Reader ID</th>
                <th>Reader name</th>
                <th>Number of scans</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var readerEvents in processTopFive())
            {
                var readerId = readerEvents.First().ReaderId;
                var readerName = readerEvents.First().ReaderDesc;
                var scanCount = readerEvents.Count;

                <tr>
                    <td>@readerId</td>
                    <td>@readerName</td>
                    <td>@scanCount</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>

}
else
{
    <p>No data available.</p>
    <p>@(readerIDDict !=null)</p>
    <p>@(readerIDDict.Count > 0)</p>
    @foreach(var kvp in readerIDDict){
        <p>@kvp.Value</p>
    }

}
<br><br>
@* loops through events and orders them in days of the week  *@
@if (masterDictionary != null && masterDictionary.Count > 0)
{
    <MudSimpleTable>
        <thead>
            <tr style="background-color: black; color:white;">
                <th>Day of week</th>
                <th>Number of scans per day</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var kvp in orderedMasterDictionary() ?? Enumerable.Empty<KeyValuePair<string, List<ReaderEvent>>>())
            {
                <tr>
                    <td>@kvp.Key</td>
                    <td>@kvp.Value?.Count</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
}
else
{
    <p>No data available.</p
    <p>@(masterDictionary !=null)</p>
    <p>@(masterDictionary.Count > 0)</p>
    @foreach(var kvp in masterDictionary ?? new Dictionary<string, List<ReaderEvent>>()){
        <p>@kvp.Value</p>
    }
}
@* chart that displays days of the week activity*@
<div style="text-align:center">
    @* <MudMenu Icon="@Icons.Material.Filled.AddCircle"
         AriaLabel="Open user menu">
    <MudMenuItem Label="Change the date bounds" OnClick="@changedDateBounds"/>
</MudMenu>
@if(menuActive){
        string firstLabel = $"Select the earliest and latest dates to change the graph. The earliest possible date is {earliestDateTime} and the latest date is {latestDateTime}.";
        <p>@firstLabel</p>
        <MudDatePicker Style="width:400px;" Label="Earliest date to test" MinDate="@earliestDateTime" MaxDate="@latestDateQuery" @bind-Date="earliestDateQuery" @bind-Date:event="EarliestDateChanged"/>
        <MudDatePicker Style="width:400px;" Label="Latest date to test" MinDate="@earliestDateQuery" MaxDate="@latestDateTime" @bind-Date="latestDateQuery"/>
    } *@
    <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" ChartOptions="@Options"/>
</div>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="returnHome">Upload another file</MudButton>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="downloadNewPDF">Download a summarized .pdf</MudButton>
@code
{
    // variables 
    private IJSObjectReference? _jsModule;
     private DateTime? earliestDateQuery = earliestDateTime;
     private DateTime? latestDateQuery = latestDateTime;
    public bool menuActive = false;
    public string TextValue { get; set; }
    private readonly List<string> dayOrder = new List<string>
    {
        "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
    };
    private TimeSpan autocycletime = new TimeSpan(0,0,10);
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;
    public static DateTime earliestDateTime { get; set; } = DateTime.MinValue;
    public static DateTime latestDateTime { get; set; } = DateTime.MaxValue;
    private int Index = -1;
    public ChartOptions Options = new ChartOptions(){
        ChartPalette = new[] { "#ef4638"},
    };
    
    public string[] XAxisLabels = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday","Saturday"};
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private Dictionary<string, List<ReaderEvent>> readerIDDict = StaticReaderEvent.ReaderIDDict;
    public Dictionary<string, List<ReaderEvent>> masterDictionary = StaticReaderEvent.MasterDictionary;
    public List<ChartSeries> Series = StaticReaderEvent.Series;
    public string FileName { get; set; } = StaticReaderEvent.FileName;
    public long FileSize { get; set; } = StaticReaderEvent.FileSize;
    public long FileSizeMB { get; set; } = StaticReaderEvent.FileSizeMB;
    public string FileType { get; set; } = StaticReaderEvent.FileType;
    public DateTimeOffset LastModified { get; set; } = StaticReaderEvent.LastModified;
    public string ErrorMessage { get; set; } = "";
    protected override async Task OnAfterRenderAsync(bool firstRender)
                {
                    if (firstRender)
                    {
                        _jsModule = await JS.InvokeAsync<IJSObjectReference>(
                            "import", "./js/download.js");
                    }
                    await base.OnAfterRenderAsync(firstRender);
                }
    private void UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            this.files.Add(file);
        }
    }

    public void UploadFiles2(IBrowserFile file)
    {
        Console.WriteLine("test");
        files.Add(file);
        NavManager.NavigateTo("upload");
        FileUploaded(file);
    }
    
    
    public class ReaderEvent{
        
        
        public string Time {get; set;}
        public string Location {get; set;}
        public string ReaderDesc {get; set;}
        public string ReaderIdHash {get; set;}
        public string DevId {get; set;}
        public string MachineId {get; set;}
        public string ReaderId {get; set;}

        public ReaderEvent(){
            Time = "0";
            Location = "";
            ReaderDesc = "";
            ReaderIdHash = "";
            DevId = "";
            MachineId = "";
            ReaderId = MachineId + DevId;

        }
        public ReaderEvent(string newTime, string newLocation, string newReaderDesc, string newReaderIdHash, string newDevID, string newMachineId){
            Time = newTime;
            Location = newLocation;
            ReaderDesc = newReaderDesc;
            ReaderIdHash = newReaderIdHash;
            DevId = newDevID;
            MachineId = newMachineId;
            ReaderId = MachineId + DevId;
        }
        public override string ToString(){
            return $"Time: {Time}. Location: {Location}. Reader Description: {ReaderDesc}. DevId: {DevId}. Machine ID: {MachineId}";
        }
        // populates the dictionary that contains the date time info with days of the week
         public static Dictionary<string,List<ReaderEvent>> masterDict(List<ReaderEvent> newReaderEvents){
            Console.WriteLine("new testing");
            Dictionary<string,List<ReaderEvent>> keyValuePairs = new Dictionary<string, List<ReaderEvent>>();
            foreach(ReaderEvent i in newReaderEvents){
                DateTime dateTime = DateTime.Parse(i.Time);
                string dayValue = dateTime.ToString("D").Split(",")[0];
                if(DateTime.Compare(DateTime.Parse(i.Time),earliestDateTime) > 0){
                    if(dateTime > earliestDateTime && dateTime < latestDateTime){
                    if(keyValuePairs.ContainsKey(dayValue)){
                        keyValuePairs.TryGetValue(dayValue, out var value);
                        value.Add(i);
                        
                    }
                    else{
                        List<ReaderEvent> newReader = new List<ReaderEvent>();
                            newReader.Add(i);
                            keyValuePairs.Add(dayValue,newReader);
                    }
                    }
                }
            }
            return keyValuePairs;
        }
        // populates the dictionary with all of the reader events and readers
        public static Dictionary<String, List<ReaderEvent>> returnDictionary(List<ReaderEvent> readerEvents){
            Dictionary<String,List<ReaderEvent>> returnDict = new Dictionary<string, List<ReaderEvent>>();
            foreach(ReaderEvent i in readerEvents){
                if(returnDict.ContainsKey(i.ReaderId)){
                    returnDict.TryGetValue(i.ReaderId, out var value);
                    value.Add(i);
                }
                else{
                    List<ReaderEvent> newReader = new List<ReaderEvent>();
                    newReader.Add(i);
                    returnDict.Add(i.ReaderId,newReader);
                }
            }
            return returnDict;
            }
        
    public static List<String[]>? returnStrings(string Filename){
    String line;
    List<String[]> returnString = new List<string[]>();
    try
    {
        using (StreamReader sr = new StreamReader(Filename))
        {
            line = sr.ReadLine();
            line = sr.ReadLine();
            while (line != null)
            {
                returnString.Add(line.Split(','));
                line = sr.ReadLine();
            }
        }
    }
    catch (Exception e)
    {
        Console.WriteLine("Exception: " + e.Message + " in returnStrings");
        return null;
    }
    finally
    {
        Console.WriteLine("Executing finally block.");
    }

    return returnString;
}

        public static List<ReaderEvent> Display(List<String[]> returnList){
            List<ReaderEvent> readerEvents = new List<ReaderEvent>();
            foreach(string[] i in returnList){
                if (i.Length >= 5)
                {
                    ReaderEvent newReader = new ReaderEvent(i[0], i[1], i[2], i[3], i[4], i[5]);
                    readerEvents.Add(newReader);
                }
            }
             return readerEvents;
        }

        


        

        

    }


    public static class StaticReaderEvent{
        public static List<ReaderEvent> readerEvents = new List<ReaderEvent>();
        public static string FileName { get; set; } = "";
        public static long FileSize { get; set; }
        public static long FileSizeMB {get; set;}
        public static string FileType { get; set; } = "";
        public static DateTimeOffset LastModified { get; set; }
        public static string ErrorMessage { get; set; } = "";
        public static Dictionary<string,List<ReaderEvent>> ReaderIDDict { get; set; } = new();
        public static Dictionary<string, List<ReaderEvent>> MasterDictionary { get; set; } = new();
        public static List<ChartSeries> Series  { get; set; } = new()
        {
            new ChartSeries() { Name = "Days of the week", Data = new double[7]  },
        };
    }

    
    private List<ReaderEvent> newEvents = new List<ReaderEvent>();
    const int MAX_FILESIZE = 1000000 * 1024;
    
    public async Task FileUploaded(IBrowserFile file)
{
    var browserFile = file;

    if (browserFile != null)
    {
        StaticReaderEvent.FileSize = browserFile.Size;
        StaticReaderEvent.FileSizeMB = FileSize / 1_000_000;
        StaticReaderEvent.FileType = browserFile.ContentType;
        StaticReaderEvent.FileName = browserFile.Name;
        StaticReaderEvent.LastModified = browserFile.LastModified;

        FileSize = StaticReaderEvent.FileSize;
        FileSizeMB = StaticReaderEvent.FileSizeMB;
        FileType = StaticReaderEvent.FileType;
        FileName = StaticReaderEvent.FileName;
        LastModified = StaticReaderEvent.LastModified;
        StateHasChanged();
        try
        {
            var fileStream = browserFile.OpenReadStream(MAX_FILESIZE);
            var targetFilePath = Path.Combine(Path.GetTempPath(), FileName);
            Console.WriteLine($"Saving file to: {targetFilePath}");

            using (var destinationStream = new FileStream(targetFilePath, FileMode.Create))
            {
                await fileStream.CopyToAsync(destinationStream);
            }

            finalDisplay(targetFilePath);
            StateHasChanged();
        }
        catch (Exception exception)
        {
            ErrorMessage = exception.Message + "test";
        }
    }
}
private void EarliestDateChanged(DateTime? newDate)
    {
        Console.WriteLine("new testing thang");
        populateMasterDictionary(newDate);
    }

private void populateMasterDictionary(DateTime? newDate){
    Dictionary<string,List<ReaderEvent>> newmasterDictionary = new Dictionary<string, List<ReaderEvent>>();
    List<string[]> listCount = ReaderEvent.returnStrings(FilePath);
    if(listCount != null){
        newEvents = ReaderEvent.Display(listCount);
        newmasterDictionary = ReaderEvent.masterDict(newEvents);
        Console.WriteLine("method test");
        masterDictionary = newmasterDictionary;
    }
    Console.WriteLine("method test 2");
   
}

private void finalDisplay(string fileName)
// calls the method to populate the dictionaries and lists, displays info
    {
        StaticReaderEvent.FileName = Path.GetFileName(fileName);
        List<string[]> listCount = ReaderEvent.returnStrings(fileName);
        if (listCount != null)
        {
            
            newEvents = ReaderEvent.Display(listCount);
            readerIDDict = ReaderEvent.returnDictionary(newEvents);
            masterDictionary = ReaderEvent.masterDict(newEvents);

            StaticReaderEvent.ReaderIDDict = readerIDDict;
            StaticReaderEvent.MasterDictionary = masterDictionary;
            double[] eventCounts = new double[7];
            foreach (var kvp in masterDictionary)
        {
            switch (kvp.Key)
            {
                case "Sunday": eventCounts[0] = kvp.Value.Count; break;
                case "Monday": eventCounts[1] = kvp.Value.Count; break;
                case "Tuesday": eventCounts[2] = kvp.Value.Count; break;
                case "Wednesday": eventCounts[3] = kvp.Value.Count; break;
                case "Thursday": eventCounts[4] = kvp.Value.Count; break;
                case "Friday": eventCounts[5] = kvp.Value.Count; break;
                case "Saturday": eventCounts[6] = kvp.Value.Count; break;
            }
        }
        Series[0].Data = eventCounts;
        }
        
        StateHasChanged();
    }
    //takes the parameter that I passed from the url in Home.razor
    [Parameter]
    [SupplyParameterFromQuery]
    public string FilePath { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(FilePath))
        {
            finalDisplay(FilePath);
            StateHasChanged();
        }
    }
    private void returnHome(){
        NavManager.NavigateTo("/");
    }
    // returns which userID has the most scans
    private string returnMostScans(){
    if (readerIDDict != null && readerIDDict.Count > 0){
    List<string> strings = new List<string>();
    foreach (var kvp in readerIDDict)
            {
                foreach(ReaderEvent i in kvp.Value){
                    strings.Add(i.ReaderIdHash);
                }
                
                
    }
    var most = (from i in strings
            group i by i into grp
            orderby grp.Count() descending
            select grp.Key).First();
    return most;
    }
    return null;
    }
    // identifies how many unique users there are
    private int uniqueUsers(){
    List<string> strings = new List<string>();
    if (readerIDDict != null && readerIDDict.Count > 0){
        foreach(var kvp in readerIDDict){
            @foreach(ReaderEvent i in kvp.Value){
                    if(!strings.Contains(i.ReaderIdHash)){
                        strings.Add(i.ReaderIdHash);
                    }
                }
        }
    }
    return strings.Count;
    }
    // which reader has the most scans
    private string mostReaderScans(){
        if (readerIDDict != null && readerIDDict.Count > 0){
        int maxVal = 0;
        string maxValReader = "";
            foreach (var kvp in readerIDDict)
                {
                var readerId = kvp.Key; 
                var readerEvents = kvp.Value;
                var readerName = readerEvents.First().ReaderDesc;
                if(readerEvents.Count > maxVal){
                    maxVal = readerEvents.Count;
                    maxValReader = readerName + " with " + maxVal + " scans.";
                }     
        }
    return maxValReader;
    }
    else{
        return null;
    }
    }
    // which reader has the least scans
    private List<string> leastReaderScans(){
        if (readerIDDict != null && readerIDDict.Count > 0){
        List<string> minVals = new List<string>();
        int minVal = int.MaxValue;
        string minValReader = "";
            foreach (var kvp in readerIDDict)
                {
                var readerId = kvp.Key; 
                var readerEvents = kvp.Value;
                var readerName = readerEvents.First().ReaderDesc;
                if(minVal > readerEvents.Count){
                    minVal = readerEvents.Count;
                }     
        }
    @foreach (var kvp in readerIDDict)
                {
                var readerId = kvp.Key; 
                var readerEvents = kvp.Value;
                var readerName = readerEvents.First().ReaderDesc;
                if(minVal == readerEvents.Count){
                    minValReader = readerName + " with " + minVal + " scan(s). ";
                    minVals.Add(minValReader);
                }     
        }
    Console.WriteLine(minVals.Count);
    return minVals;
    }
    else{
        return null;
    }
    }
    // processes the top five panels and orders them by scans
    private List<List<ReaderEvent>> processTopFive(){
    if (readerIDDict == null || readerIDDict.Count == 0)
    {
        return new List<List<ReaderEvent>>();
    }

    return readerIDDict
        .OrderByDescending(kvp => kvp.Value.Count)
        .Take(5)
        .Select(kvp => kvp.Value)
        .ToList();
}

private IEnumerable<KeyValuePair<string, List<ReaderEvent>>> orderedMasterDictionary()
    {
        
        if (masterDictionary != null && masterDictionary.Count > 0)
        {
            return masterDictionary
                .OrderBy(kvp => dayOrder.IndexOf(kvp.Key)); 
        }
        return Enumerable.Empty<KeyValuePair<string, List<ReaderEvent>>>();
    }

    private async Task downloadNewPDF()
{
    // creating a currentDateTimeFile specifically to use in the file name due to windows blocking all file names with ":" or "/"
    string currentDateTimeFile = DateTime.Now.ToString("MM-dd-yyyy hh-mm-ss");
    string currentDateTimeText = DateTime.Now.ToString("MM/dd/yyyy hh:mm:ss");
    Console.WriteLine(StaticReaderEvent.FileName);
    string filePathName = StaticReaderEvent.FileName + " at " + currentDateTimeFile + ".pdf";

    byte[] pdfBytes;
    using (var memoryStream = new MemoryStream())
    {
        var pdfWriter = new PdfWriter(memoryStream);
        var pdfDoc = new PdfDocument(pdfWriter);
        var doc = new Document(pdfDoc);
        
        doc.Add(new Paragraph("Summary of information from .csv"));
        Table baseInfoTable = new Table(UnitValue.CreatePercentArray(2)).UseAllAvailableWidth();
        baseInfoTable.AddCell("Uploaded .csv file name");
        baseInfoTable.AddCell($"{StaticReaderEvent.FileName}");
        baseInfoTable.AddCell("Date & Time downloaded");
        baseInfoTable.AddCell($"{currentDateTimeText}");
        baseInfoTable.AddCell("Most scans by User ID hash");
        baseInfoTable.AddCell($"{returnMostScans()}");
        doc.Add(baseInfoTable);
        doc.Add(new Paragraph().SetMarginTop(20));
        Table readerEntryTable = new Table(UnitValue.CreatePercentArray(3)).UseAllAvailableWidth();
        readerEntryTable.AddCell("Reader ID");
        readerEntryTable.AddCell("Reader Name");
        readerEntryTable.AddCell("Number of scans");
        foreach (var readerEvents in processTopFive())
        {
            var readerId = readerEvents.First().ReaderId;
            var readerName = readerEvents.First().ReaderDesc;
            var scanCount = readerEvents.Count;
            readerEntryTable.AddCell($"{readerId.ToString()}");
            readerEntryTable.AddCell($"{readerName.ToString()}");
            readerEntryTable.AddCell($"{scanCount.ToString()}");
        }
        doc.Add(readerEntryTable);
        doc.Add(new Paragraph().SetMarginTop(20));
        Table entriesByDayOfWeek = new Table(UnitValue.CreatePercentArray(2)).UseAllAvailableWidth();
        entriesByDayOfWeek.AddCell("Day of the week");
        entriesByDayOfWeek.AddCell("Scans on day of the week");
        foreach (var kvp in orderedMasterDictionary())
        {
            entriesByDayOfWeek.AddCell($"{kvp.Key}");
            entriesByDayOfWeek.AddCell($"{kvp.Value.Count.ToString()}");
        }
        doc.Add(entriesByDayOfWeek);
        // adding the image into the pdf
        var imagePath = System.IO.Path.Combine(env.WebRootPath, "images", "OGE.png");
        ImageData imageData = ImageDataFactory.Create(imagePath);
        Image image = new Image(imageData);
        image.ScaleToFit(200, 200);
        image.SetFixedPosition(400, 50);
        doc.Add(image);

        doc.Close();
        pdfBytes = memoryStream.ToArray();
        // javascript for downloading the pdf client side
        if (_jsModule != null){
            await _jsModule.InvokeVoidAsync("downloadFileFromBytes", filePathName, pdfBytes);
        }
        }
        async ValueTask DisposeAsync(){
                    if (_jsModule != null)
                    {
                        await _jsModule.DisposeAsync();
                    }
                }
    

}

    public void changedDateBounds()
{
    Console.WriteLine("changedDateBounds called");
    List<DateTimeOffset> dateTimeList = new List<DateTimeOffset>();
    DateTimeOffset testDateTime = new DateTimeOffset();
    earliestDateTime = DateTime.MaxValue;
    latestDateTime = DateTime.MinValue;
    foreach (var kvp in masterDictionary)
    {
        foreach (ReaderEvent i in kvp.Value)
        {
            try
            {
                DateTimeOffset newDateTime = DateTimeOffset.ParseExact(i.Time, "yyyy-MM-ddTHH:mm:ssZ", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.AssumeUniversal);
                dateTimeList.Add(newDateTime);
                if (newDateTime.UtcDateTime < earliestDateTime)
                {
                    earliestDateTime = newDateTime.LocalDateTime;
                }
                if (latestDateTime == null || newDateTime.UtcDateTime > latestDateTime)
                {
                    latestDateTime = newDateTime.LocalDateTime;
                }
            }
            catch (FormatException ex)
            {
                Console.WriteLine($"Error parsing date '{i.Time}': {ex.Message}");
            }
        }
    }

    menuActive = true;
    earliestDateQuery = earliestDateTime;
    latestDateQuery = latestDateTime;
} 

private void updateChartSeries()
{
    double[] eventCounts = new double[7];
    foreach (var kvp in masterDictionary)
    {
        switch (kvp.Key)
        {
            case "Sunday": eventCounts[0] = kvp.Value.Count; break;
            case "Monday": eventCounts[1] = kvp.Value.Count; break;
            case "Tuesday": eventCounts[2] = kvp.Value.Count; break;
            case "Wednesday": eventCounts[3] = kvp.Value.Count; break;
            case "Thursday": eventCounts[4] = kvp.Value.Count; break;
            case "Friday": eventCounts[5] = kvp.Value.Count; break;
            case "Saturday": eventCounts[6] = kvp.Value.Count; break;
        }
    }
    Series[0].Data = eventCounts;
}

@* private void updateMasterDictionary(){
    Console.WriteLine("new test");
    foreach(var kvp in masterDictionary){
        foreach(var i in kvp.Value){
            Console.WriteLine(i);
        }
    }
} *@



}
